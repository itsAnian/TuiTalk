# version: '3.3'
services:
  postgresdb:
    build: db
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
    volumes:
      - tui_pg_volume:/var/lib/postgresql/data
    networks:
      - loadbalancing

  tuitalk_backend_0:
    container_name: backend_0
    build:
      context: rust
      dockerfile: Dockerfile
    environment:
      - REDIS_NODES=redis-1:6379,redis-2:6379,redis-3:6379
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    networks:
      - loadbalancing
    ports:
      - "8080:8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      redis-node-1:
        condition: service_started
      redis-node-2:
        condition: service_started
      redis-node-3:
        condition: service_started
      redis-node-4:
        condition: service_started
      redis-node-5:
        condition: service_started
      redis-node-6:
        condition: service_started

  tuitalk_backend_1:
    container_name: backend_1
    build:
      context: rust
      dockerfile: Dockerfile
    environment:
      - REDIS_NODES=redis-1:6379,redis-2:6379,redis-3:6379,redis-4:6379,redis-5:6379,redis-6:6379
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    networks:
      - loadbalancing
    ports:
      - "8081:8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      redis-node-1:
        condition: service_started
      redis-node-2:
        condition: service_started
      redis-node-3:
        condition: service_started
      redis-node-4:
        condition: service_started
      redis-node-5:
        condition: service_started
      redis-node-6:
        condition: service_started

  tuitalk_backend_2:
    container_name: backend_2
    build:
      context: rust
      dockerfile: Dockerfile
    environment:
      - REDIS_NODES=redis-1:6379,redis-2:6379,redis-3:6379,redis-4:6379,redis-5:6379,redis-6:6379
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
    networks:
      - loadbalancing
    ports:
      - "8082:8080"
    depends_on:
      postgresdb:
        condition: service_healthy
      redis-node-1:
        condition: service_started
      redis-node-2:
        condition: service_started
      redis-node-3:
        condition: service_started
      redis-node-4:
        condition: service_started
      redis-node-5:
        condition: service_started
      redis-node-6:
        condition: service_started
  tuitalk_wasm:
    build:
      context: rust
      dockerfile: Dockerfile.wasm
    container_name: tuitalk-wasm
    ports:
      - "7777:80"
    networks:
      - loadbalancing

  loadbalancer:
    build: loadbalancer
    container_name: loadbalancer
    ports:
      - "8079:80"
    networks:
      - loadbalancing
    depends_on:
      - tuitalk_backend_0
      - tuitalk_backend_1
      - tuitalk_backend_2

  redis-cluster-init:
    build: redis-cluster
    container_name: redis-cluster-init
    networks:
      - loadbalancing
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    command: >
      sh -c "
      sleep 10;
      echo 'yes' | redis-cli --cluster create redis-1:6379 redis-2:6379 redis-3:6379 redis-4:6379 redis-5:6379 redis-6:6379 --cluster-replicas 1;
      "
  redis-node-1:
    build: redis-cluster
    container_name: redis-1
    ports:
      - "7001:6379"
    volumes:
      - redis-data-1:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - loadbalancing

  redis-node-2:
    build: redis-cluster
    container_name: redis-2
    ports:
      - "7002:6379"
    volumes:
      - redis-data-2:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - loadbalancing

  redis-node-3:
    build: redis-cluster
    container_name: redis-3
    ports:
      - "7003:6379"
    volumes:
      - redis-data-3:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - loadbalancing

  redis-node-4:
    build: redis-cluster
    container_name: redis-4
    ports:
      - "7004:6379"
    volumes:
      - redis-data-4:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - loadbalancing

  redis-node-5:
    build: redis-cluster
    container_name: redis-5
    ports:
      - "7005:6379"
    volumes:
      - redis-data-5:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - loadbalancing

  redis-node-6:
    build: redis-cluster
    container_name: redis-6
    ports:
      - "7006:6379"
    volumes:
      - redis-data-6:/data
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - loadbalancing
networks:
  loadbalancing:
    driver: bridge

volumes:
  redis-data-1:
  redis-data-2:
  redis-data-3:
  redis-data-4:
  redis-data-5:
  redis-data-6:
  tui_pg_volume:
